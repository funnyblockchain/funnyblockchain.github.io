{"meta":{"title":"FunnyBlockchain","subtitle":null,"description":"有趣有料,就在 FunnyBlockchain.com","author":null,"url":"http://funnyblockchain.com"},"pages":[{"title":"介绍","date":"2017-11-05T20:06:16.000Z","updated":"2017-11-06T04:07:32.665Z","comments":false,"path":"about/index.html","permalink":"http://funnyblockchain.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-11-06T05:55:23.000Z","updated":"2017-11-06T05:57:54.294Z","comments":false,"path":"categories/index.html","permalink":"http://funnyblockchain.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-11-06T05:55:23.000Z","updated":"2017-11-06T05:57:09.706Z","comments":false,"path":"tags/index.html","permalink":"http://funnyblockchain.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用Go语言打造区块链(1) - 基本原型","slug":"build-a-blockchain-in-go-part1","date":"2017-11-26T09:00:42.000Z","updated":"2017-11-26T09:12:12.918Z","comments":true,"path":"20171126/build-a-blockchain-in-go-part1/","link":"","permalink":"http://funnyblockchain.com/20171126/build-a-blockchain-in-go-part1/","excerpt":"区块链（Blockchain）是21世纪最具有革命性的技术之一，目前还在不断成熟，功能还在不断实现中。本质上，区块链只是一个分布式记录的数据库。但是，与众不同的是：这不是一个私有的数据库，而是一个公开的数据库，也就是，每一个使用它的人都有一个完整的或者部分的副本。并且，只有经过数据库其他人员的同意才能添加新的记录。除此之外，正是区块链的出现，使得加密货币和智能合约实现成为可能。作者：Ivan Kuznetsov翻译：区块链盟主原文：https://jeiwan.cc/posts/building-blockchain-in-go-part-1/","text":"区块链（Blockchain）是21世纪最具有革命性的技术之一，目前还在不断成熟，功能还在不断实现中。本质上，区块链只是一个分布式记录的数据库。但是，与众不同的是：这不是一个私有的数据库，而是一个公开的数据库，也就是，每一个使用它的人都有一个完整的或者部分的副本。并且，只有经过数据库其他人员的同意才能添加新的记录。除此之外，正是区块链的出现，使得加密货币和智能合约实现成为可能。作者：Ivan Kuznetsov翻译：区块链盟主原文：https://jeiwan.cc/posts/building-blockchain-in-go-part-1/介绍区块链（Blockchain）是21世纪最具有革命性的技术之一，目前还在不断成熟，功能还在不断实现中。本质上，区块链只是一个分布式数据库。但独特是：这不是一个私有的数据库，而是一个公开的数据库，也就是，每一个使用它的人都有一个完整或部分的副本。并且，只有经过数据库其他人员的同意才能添加新的记录。除此之外，正是区块链的出现，使得加密货币和智能合约实现成为可能。在这个系列文章中，我们会实现一个简单的区块链,并用他打造一个简化版的加密货币。区块（Block）我们先以区块开始。在区块链中，有价值的信息存储在区块中。比如，比特币的区块存储着交易信息，而这是任何加密货币的核心。除此之外，区块中还包含一些技术信息，比如版本号，当前时间戳和上一个区块的哈希值（Hash）。这篇文章中，我们不会完全按照区块链或者比特币规范实现一个区块，而是使用一个简化版，只包含一些重要的核心信息。就像下面这样：123456type Block struct &#123; Timestamp int64 Data []byte PrevBlockHash []byte Hash []byte&#125;Timestamp（时间戳）就是当前区块产生的那个时刻，Data（数据）是区块中包含的实际有价值的信息，PrevBlockHash前一个区块的哈希值 ，Hash表示此区块的哈希值。在比特币的规范中，Timestamp, PrevBlockHash, Hash 是一个区块的头信息，是一块单独的数据结构。而交易信息（也就是本例中的Data数据）也是一块单独的数据结构。我们为了简化就把它们放在一起了。那么我们如何计算哈希值（Hashes）呢？哈希值的计算方式 是区块链一个非常重要的特征，正是这个特点使得区块链变得安全。计算哈希值 是一个很难的计算操作，即使是很性能很高的计算机也需要花一点时间（这也为什么人们购买性能强大的GPU挖矿比特币的原因，当然现在早已经升级到更强大的专用集成电路芯片ASIC挖矿）。这是一个故意设计的架构，让新增区块变得比较困难，还防止新增之后又去修改。我们会在后面的讨论并实现这个机制。现在，我们取几个区块链的字段，把他们串联起来，然后计算他们的 SHA-256 Hash （一种哈希算法）。我们创建一个函数SetHash，来做这件事情：1234567func (b *Block) SetHash() &#123; timestamp := []byte(strconv.FormatInt(b.Timestamp, 10)) headers := bytes.Join([][]byte&#123;b.PrevBlockHash, b.Data, timestamp&#125;, []byte&#123;&#125;) hash := sha256.Sum256(headers) b.Hash = hash[:]&#125;接下来，根据Go语言的约定方式，我们实现一个函数，以便简单的创建区块（Block）:12345func NewBlock(data string, prevBlockHash []byte) *Block &#123; block := &amp;Block&#123;time.Now().Unix(), []byte(data), prevBlockHash, []byte&#123;&#125;&#125; block.SetHash() return block&#125;就是这么简单。区块链（Blockchain）现在，我们来实现区块链。本质上，区块链就是一个具有特定数据结构（有序的反向链表）的数据库。也就是，区块以插入的顺序存储，并且每个区块都 与之前的形成链式关系。这种结构可以快速的找到区块链上的最新区块，同时也可以很高效根据的哈希值找到区块。在Go语言中， 这种结构可以通过数组（Array）或者数图map集合来实现，数组可以保存有序的哈希值（在Go语言中数据是有序的），map集合可以保存 啥希值-&gt;区块 键值对（map集合是无序的）。但是，对于我们这个区块链原型，我们只用数组，因为我们目前不需要通过哈希值来找区块。123type Blockchain struct &#123; blocks []*Block&#125;瞧，这就是我们第一个区块链！我都没想到会这么简单，哈哈！现在，我们来实现添加区块：12345func (bc *Blockchain) AddBlock(data string) &#123; prevBlock := bc.blocks[len(bc.blocks)-1] newBlock := NewBlock(data, prevBlock.Hash) bc.blocks = append(bc.blocks, newBlock)&#125;就是这样！没问题，一个字 笑~我们需要一个已经存在的区块才能新增区块，但是在我们区块链中还没有区块！所以，在任何一个区块链中，都必须有至少一个区块–创世区块（Genesis Block）。我们实现一个函数来创造这样的区块：123func NewGenesisBlock() *Block &#123; return NewBlock(\"Genesis Block\", []byte&#123;&#125;)&#125;现在我们可以用这个创世区块来创造一个区块链：123func NewBlockchain() *Blockchain &#123; return &amp;Blockchain&#123;[]*Block&#123;NewGenesisBlock()&#125;&#125;&#125;我们检查一下区块能不能正常运行：12345678910111213func main() &#123; bc := NewBlockchain() bc.AddBlock(\"Send 1 BTC to Ivan\") bc.AddBlock(\"Send 2 more BTC to Ivan\") for _, block := range bc.blocks &#123; fmt.Printf(\"Prev. hash: %x\\n\", block.PrevBlockHash) fmt.Printf(\"Data: %s\\n\", block.Data) fmt.Printf(\"Hash: %x\\n\", block.Hash) fmt.Println() &#125;&#125;结果：1234567891011Prev. hash:Data: Genesis BlockHash: aff955a50dc6cd2abfe81b8849eab15f99ed1dc333d38487024223b5fe0f1168Prev. hash: aff955a50dc6cd2abfe81b8849eab15f99ed1dc333d38487024223b5fe0f1168Data: Send 1 BTC to IvanHash: d75ce22a840abb9b4e8fc3b60767c4ba3f46a0432d3ea15b71aef9fde6a314e1Prev. hash: d75ce22a840abb9b4e8fc3b60767c4ba3f46a0432d3ea15b71aef9fde6a314e1Data: Send 2 more BTC to IvanHash: 561237522bb7fcfbccbc6fe0e98bbbde7427ffe01c6fb223f7562288ca2295d1看着还不错！总结我们构建了一个简单的区块链原型：就是一个区块数组，每个区块都指向前面的区块。真实的区块链要复杂的多。我们区块链中，新增区块非常简单、快速，但是在真实的区块链中，添加新的区块需要做很多事情：有一项就是在获得添加区块的权限之前要运行大量的计算工作（这个机制称为工作量证明）。同时，区块链不是一个独裁者的，而是分布式数据库。因此，一个新的区块必须要通过网络的其他参与都的确认与批准（这个机制称为共识）。目前我们的区块链中还没有交易信息！在后面的文章中，我们会讲到这些特性。PS：笑来老师也翻译过一篇http://lixiaolai.com/2017/09/28/building-blockchain-in-go-part-1/欢迎转载，本文地址： http://funnyblockchain.com/20171126/build-a-blockchain-in-go-part1/","categories":[{"name":"翻译,区块链","slug":"翻译-区块链","permalink":"http://funnyblockchain.com/categories/翻译-区块链/"}],"tags":[{"name":"GO","slug":"GO","permalink":"http://funnyblockchain.com/tags/GO/"},{"name":"翻译","slug":"翻译","permalink":"http://funnyblockchain.com/tags/翻译/"},{"name":"区块链","slug":"区块链","permalink":"http://funnyblockchain.com/tags/区块链/"},{"name":"blockchain","slug":"blockchain","permalink":"http://funnyblockchain.com/tags/blockchain/"},{"name":"区块链盟主","slug":"区块链盟主","permalink":"http://funnyblockchain.com/tags/区块链盟主/"}]}]}